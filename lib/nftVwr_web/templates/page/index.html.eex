

	

		<div id="info"><a href="https://threejs.org" target="_blank" rel="noopener">NFT Showcase:</a> display, swap and auction your NFTs</div>
		<div id="container"></div>

	
		<script type="module">

			import * as THREE from "<%= Routes.static_path(@conn, "/js/three.module.js") %>";
			import { TWEEN } from "<%= Routes.static_path(@conn, "/js/tween.module.min.js") %>";
            import { TrackballControls } from "<%= Routes.static_path(@conn, "/js/TrackballControls.js") %>";
			import { CSS3DRenderer, CSS3DObject } from "<%= Routes.static_path(@conn, "/js/CSS3DRenderer.js") %>";
            

			//var ee = new EventEmitter();
			
 			window.addEventListener( 'drawBoard', drawBoard, false);
			window.addEventListener( 'showProfile', displayProfileOverlay, false);
			window.addEventListener( 'hideProfile', hideProfileOverlay, false);
			const resetButton = document.getElementById( 'resetButton' );
			if(resetButton) {resetButton.addEventListener('click', resetScreen)}
			const loadNFTsButton = document.getElementById('loadNFTsButton');
			if(loadNFTsButton) {loadNFTsButton.addEventListener('click', loadNFTs)}

			setupZilPay();

			function setupZilPay(){
				//get a reference to the ZilPay button on the screen. 
				const zilpayButton = document.getElementById( 'zilpayButton' );

				// If ZilPay is here, watch for click. When clicked ask ZilPay for wallet info. 
				if(zilpayButton){
					zilpayButton.addEventListener( 'click', function () {

						if(window.zilPay){
							window.zilPay.wallet.connect();

							if(window.zilPay.wallet.defaultAccount){
								console.log(window.zilPay.wallet.defaultAccount);
								var event = new Event("showProfile");
								event.walletID = window.zilPay.wallet.defaultAccount;
								//Dispatch a "zilPayConnected" event with walletID as a property. 
								window.dispatchEvent(event);
							}						
						}
					} );
				}
			}

			initChannel()

            let camera, scene, renderer;
            let controls;
			let boardDrawn = false;
			const tileWidth = 128;
			const tileHeight = 192;
			const tileMargins = 20;

			const objects = [];
			const targets = { table: [], sphere: [], helix: [], grid: [], overlay: [] };

			var tileSlots = [];
			init();
			animate();

			function init() {
				camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
				//camera = new THREE.OrthographicCamera( window.innerWidth/-2, window.innerHeight/2, window.innerWidth/2, window.innerHeight/-2, 1, 10000 );
				camera.position.z = 3000;		
				camera.position.x = 0;		
				camera.position.y = 0;				
				scene = new THREE.Scene();// table

				renderer = new CSS3DRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.getElementById( 'container' ).appendChild( renderer.domElement );

				controls = new TrackballControls( camera, renderer.domElement );
				controls.minDistance = 5000;
				controls.maxDistance = 6000;
				controls.addEventListener( 'change', render );



				window.addEventListener( 'resize', onWindowResize );
			}

			
			function drawBoard(event){

				if(!boardDrawn){
					console.log(event);
				
					createScreenBorder();
					
					var group = new THREE.Group();
					group.name = "tile_board_1";

					var xOffset = -800;
					var yOffset = 440;
						
					var tileSlots = createGridOfTileSlots(event.board.tile_slots, xOffset, yOffset);				
					
					var tileSlotTable = tileSlots.forEach((ts) => {
						ts.visible=true;
						group.add(ts);
						scene.add(ts);
						targets.table.push(ts);
						return ts;
					});


					var tileTable = event.board.tiles.forEach(function fn(tile){
						var newTile = createTile({
							x: tile.x, y: tile.y, 
							tile_ID: tile.tile_ID, 
							tile_lable: tile.tile_label, 
							tile_hash: tile.tile_hash
						}, xOffset, yOffset);

						scene.add(newTile);
						objects.push( newTile );
						return createTile(newTile);
					})

					transform( targets.table, 2000 );
					boardDrawn = true;

					createProfileOverlay();
				}
			}

			function createTileSlot(tileSlot, posX=0, posY=0, posZ = 0, color = 'rgba(0,127,127,.5)'){
				const element = document.createElement( 'div' );
				element.className = 'element';
				element.style.border = '5px solid ' + color;
				//element.style.backgroundColor = color;
				console.log(element.style.border);

				const objectCSS = new CSS3DObject( element );
				objectCSS.position.x = (tileSlot.x * (tileWidth + tileMargins)) + posX; 
				objectCSS.position.y = -(tileSlot.y * (tileHeight + tileMargins)) + posY;
				objectCSS.position.z = posZ;

				return objectCSS;
			}

			function createGridOfTileSlots(tileSlots, x, y, z, c){
				return tileSlots.map((ts) => {
					return createTileSlot(ts, x, y, z, c);
				})
			}
			
			function createTile(tile, posX=0, posY=0, posZ=200, color='rgba(0,127,127,.5)'){
				const element = document.createElement( 'div' );
				element.className = 'element';
				element.ID = tile.tile_ID;
				element.style.backgroundColor = color;

				const number = document.createElement( 'div' );
				number.className = 'number';
				number.textContent = tile.tile_ID;
				element.appendChild( number );

				const symbol = document.createElement( 'div' );
				symbol.className = 'symbol';
				symbol.textContent = tile.tile_ID;
				element.appendChild( symbol );

				const details = document.createElement( 'div' );
				details.className = 'details';
				details.innerHTML = tile.tile_label + '<br>' + tile.tile_hash;
				element.appendChild( details );

				var objectCSS = new CSS3DObject( element );
				objectCSS.position.x = (tile.x * (tileWidth + tileMargins)) + posX;
				objectCSS.position.y = -(tile.y * (tileHeight + tileMargins)) + posY;
				objectCSS.position.z = posZ;

				
				element.addEventListener( 'click', function () {
					console.log(element.ID)
				} );

				return objectCSS;
			}

			function initChannel() {
				switch (document.readyState){
					case "loading":
					console.log("readyState: loading");
					window.setTimeout(initChannel, 10);
					break;
					case "interactive":
					console.log("readyState: interactive (try again in 10ms)");
					window.setTimeout(initChannel, 10);
					break;
					case "complete":
					console.log("readyState: complete");
					var event = new Event("doJoinChannel");  //listener is in socket.js
					event.channel = 'board';
					event.channel_id = "1";
					console.log("firing doJoinChannel");
					document.dispatchEvent(event);
					break;
				}
			}

			function transform( targets, duration ) {

				TWEEN.removeAll();

				for ( let i = 0; i < objects.length; i ++ ) {

					const object = objects[ i ];
					const target = targets[ i ];

					new TWEEN.Tween( object.position )
						.to( { x: target.position.x, y: target.position.y, z: target.position.z }, duration )
						.easing( TWEEN.Easing.Exponential.Out )
						.start();

					new TWEEN.Tween( object.rotation )
						.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, duration )
						.easing( TWEEN.Easing.Elastic.In )
						.start();

				}

				new TWEEN.Tween( this )
					.to( {}, duration * 2 )
					.onUpdate( render )
					.start();

			}

			function createProfileOverlay() {

				var color = 'rgba(127,0,127,.25)';

				//create outer overlay w/border
				const overlay = document.createElement( 'div' );
				overlay.className = 'overlay';
				overlay.ID = 'profile_overlay';
				
				//Create thh wallet ID
				const walletID = document.createElement( 'div' );
				walletID.id = "profile_overlay_wallet_id";
				walletID.className = 'wallet_id';
				walletID.textContent = "event.walletID.bech32";
				overlay.appendChild( walletID );

				//Add both to a CSS Object
				var objectCSS = new CSS3DObject( overlay );
				objectCSS.name = "profileOverlay_outline";
				objectCSS.position.x = 0;
				objectCSS.position.y = 200;
				objectCSS.position.z = 250;


				const loadNFTsButton = document.createElement('button');
				loadNFTsButton.id = 'loadNFTsButton';
				loadNFTsButton.className = 'actionButton';
				loadNFTsButton.textContent = "Display My NFTs";
				loadNFTsButton.style.border = '5px solid ' + color;

				var nftButton = new CSS3DObject( loadNFTsButton );
				nftButton.position.x = 0;
				nftButton.position.y = 0;
				nftButton.position.z = 250;


				//create inner 9 tile slots
				var tileSlots = [];
				for(var i = 0; i < 9; i++){
					tileSlots.push({hash:"overlayboard_" + (i/3) + (i%3), x: Math.floor(i/3), y: i%3});
				}
				
				var profileTileSlots = createGridOfTileSlots(tileSlots, objectCSS.position.x-600, objectCSS.position.y+200, objectCSS.position.z+50, color);				

				var group = new THREE.Group();
				group.name = "profileOverlay";

				group.add(objectCSS)
				group.add(nftButton);
				profileTileSlots.forEach((tileSlot) => {
					tileSlot.visible=false;
					group.add(tileSlot)});

				group.visible = false;
				objectCSS.visible = false;
				nftButton.visible = false;
				
				overlay.addEventListener( 'click', function () {
					console.log("click event on overlay" + walletID.textContent)
				} );

				scene.add(group);
			}

			function createScreenBorder() {
				const border = document.createElement( 'div' );
				border.className = 'screenBorder';
				border.ID = 'screen_border';
				

				var objectCSS = new CSS3DObject( border );
				
				objectCSS.element.style.width = window.innerWidth;

				objectCSS.name = "screen_border";
				objectCSS.position.x = 0;
				objectCSS.position.y = 0;
				objectCSS.position.z = 0;
				objectCSS.visible = true;

				var group = new THREE.Group();
				group.name = "screen_border_group";
				group.add(objectCSS)

				scene.add(group);
			}

			

			function displayProfileOverlay(event) {
				var profileOverlayGroup = scene.getObjectByName("profileOverlay");

				var profileOverlayDiv = profileOverlayGroup.getObjectByName("profileOverlay_outline");
				profileOverlayDiv = profileOverlayDiv.element;

				var walletID = profileOverlayDiv.childNodes[0];
				walletID.textContent=event.walletID.bech32;

				profileOverlayGroup.visible = true;
				profileOverlayGroup.children.map(function(node){
					node.visible = true;
				})
				render();
			}

			function hideProfileOverlay() {
				var profileOverlayGroup = scene.getObjectByName("profileOverlay");
				profileOverlayGroup.visible = false;
				profileOverlayGroup.children.forEach(function(node){
					node.visible = false;
				})
				render();
			}

			function resetScreen(event) {
				//controls.reset();
				hideProfileOverlay();
			}

			function loadNFTs() {
				var event = new Event("loadMyNFTs");
				event.contract_address = "cont_addr_tempABCDEF";
				//Dispatch a "zilPayConnected" event with walletID as a property. 
				console.log("dispatching event");
				document.dispatchEvent(event);
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				render();
			}

			function animate() {

				requestAnimationFrame( animate );

				TWEEN.update();

				//controls.update();

			}

			function render() {

				renderer.render( scene, camera );

			}
		</script>

		<div id="menu">
			<!-- button id="table">TABLE</button>
			<button id="sphere">SPHERE</button>
			<button id="helix">HELIX</button>
			<button id="grid">GRID</button -->
			<button id="zilpayButton" class="outerButton">ZilPay</button>
			<button id="resetButton" class="outerButton">Reset</button>
			<button id="loadNFTsButton" class="outerButton">Load NFTs</button>
		</div>