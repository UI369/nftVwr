

	

		<div id="info"><a href="https://threejs.org" target="_blank" rel="noopener">NFT Showcase:</a> display, swap and auction your NFTs</div>
		<div id="container"></div>

	
		<script type="module">

			import * as THREE from "<%= Routes.static_path(@conn, "/js/three.module.js") %>";

			import { TWEEN } from "<%= Routes.static_path(@conn, "/js/tween.module.min.js") %>";
			
            import { TrackballControls } from "<%= Routes.static_path(@conn, "/js/TrackballControls.js") %>";
			import { CSS3DRenderer, CSS3DObject } from "<%= Routes.static_path(@conn, "/js/CSS3DRenderer.js") %>";

			import {TileEngine} from "<%= Routes.static_path(@conn, "/js/tile_engine.module.js")%>;
            console.log("executing periodic table code now");
	        
            
            let camera, scene, renderer;
            let controls;

			TileEngine te = new TileEngine(camera, scene, renderer, controls);



			const objects = [];
			const targets = { table: [], sphere: [], helix: [], grid: [] };
			const table = [
				"1", "My NFT1", "zil03553...", 1, 5,
				"2", "My NFT2", "zil03553...", 1, 6,
				"3", "My NFT3", "zil03553...", 1, 7,
				"4", "My NFT4", "zil03553...", 2, 5,
				"5", "My NFT5", "zil03553...", 2, 6,
				"6", "My NFT6", "zil03553...", 2, 7,
				"7", "My NFT1", "zil03553...", 3, 5,
				"8", "My NFT1", "zil03553...", 3, 6,
				"9", "My NFT1", "zil03553...", 3, 7,
				"1", "My NFT1", "zil03553...", 5, 5,
				"2", "My NFT1", "zil03553...", 5, 6,
				"3", "My NFT1", "zil03553...", 5, 7,
				"4", "My NFT1", "zil03553...", 6, 5,
				"5", "My NFT1", "zil03553...", 6, 6,
				"6", "My NFT1", "12.0107", 6, 7,
				"7", "My NFT1", "14.0067", 7, 5,
				"8", "My NFT1", "15.9994", 7, 6,
				"9", "My NFT1", "18.9984032", 7, 7,
				"1", "My NFT1", "1.00794", 9, 5,
				"2", "My NFT1", "4.002602", 9, 6,
				"3", "My NFT1", "6.941", 9, 7,
				"4", "My NFT1", "9.012182", 10, 5,
				"5", "My NFT1", "10.811", 10, 6,
				"6", "My NFT1", "12.0107", 10, 7,
				"7", "My NFT1", "14.0067", 11, 5,
				"8", "My NFT1", "15.9994", 11, 6,
				"9", "My NFT1", "18.9984032", 11, 7,
				
			];

		    window.addEventListener( 'initGame', testEvent, false);
			console.log("executing periodic table code now");


			function testEvent(){
				console.log("test event");
			}
			init();
			animate();

			function init() {

				camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.z = 3000;
				

				scene = new THREE.Scene();

				// table

				for ( let i = 0; i < table.length; i += 5 ) {

					const element = document.createElement( 'div' );
					element.className = 'element';
					element.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';

					const number = document.createElement( 'div' );
					number.className = 'number';
					number.textContent = ( i / 5 ) + 1;
					element.appendChild( number );

					const symbol = document.createElement( 'div' );
					symbol.className = 'symbol';
					symbol.textContent = table[ i ];
					element.appendChild( symbol );

					const details = document.createElement( 'div' );
					details.className = 'details';
					details.innerHTML = table[ i + 1 ] + '<br>' + table[ i + 2 ];
					element.appendChild( details );

					const objectCSS = new CSS3DObject( element );
					objectCSS.position.x = Math.random() * 4000 - 2000;
					objectCSS.position.y = Math.random() * 4000 - 2000;
					objectCSS.position.z = Math.random() * 4000 - 2000;
					scene.add( objectCSS );

					objects.push( objectCSS );

					//

					const object = new THREE.Object3D();
					object.position.x = ( table[ i + 3 ] * 140 ) - 1330;
					object.position.y = - ( table[ i + 4 ] * 180 ) + 990;

					targets.table.push( object );

				}

				// sphere

				const vector = new THREE.Vector3();

				for ( let i = 0, l = objects.length; i < l; i ++ ) {

					const phi = Math.acos( - 1 + ( 2 * i ) / l );
					const theta = Math.sqrt( l * Math.PI ) * phi;

					const object = new THREE.Object3D();

					object.position.setFromSphericalCoords( 800, phi, theta );

					vector.copy( object.position ).multiplyScalar( 2 );

					object.lookAt( vector );

					targets.sphere.push( object );

				}

				// helix

				for ( let i = 0, l = objects.length; i < l; i ++ ) {

					const theta = i * 0.175 + Math.PI;
					const y = - ( i * 8 ) + 450;

					const object = new THREE.Object3D();

					object.position.setFromCylindricalCoords( 900, theta, y );

					vector.x = object.position.x * 2;
					vector.y = object.position.y;
					vector.z = object.position.z * 2;

					object.lookAt( vector );

					targets.helix.push( object );

				}

				// grid

				for ( let i = 0; i < objects.length; i ++ ) {

					const object = new THREE.Object3D();

					object.position.x = ( ( i % 5 ) * 400 ) - 800;
					object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800;
					object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000;

					targets.grid.push( object );

				}

				//

				renderer = new CSS3DRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.getElementById( 'container' ).appendChild( renderer.domElement );

				//

				controls = new TrackballControls( camera, renderer.domElement );
				controls.minDistance = 500;
				controls.maxDistance = 6000;
				controls.addEventListener( 'change', render );

				const buttonTable = document.getElementById( 'table' );
				if(buttonTable){
					buttonTable.addEventListener( 'click', function () {
						transform( targets.table, 2000 );
					} );
				}

				const buttonSphere = document.getElementById( 'sphere' );
				if(buttonSphere){
					buttonSphere.addEventListener( 'click', function () {
						transform( targets.sphere, 2000 );
					} );
				}

				const buttonHelix = document.getElementById( 'helix' );
				if(buttonHelix){
					buttonHelix.addEventListener( 'click', function () {
						transform( targets.helix, 2000 );
					} );
				}

				const buttonGrid = document.getElementById( 'grid' );
				if(buttonGrid){
					buttonGrid.addEventListener( 'click', function () {
						transform( targets.grid, 2000 );
					} );
				}

				transform( targets.table, 2000 );

				//

				window.addEventListener( 'resize', onWindowResize );

			}

			function transform( targets, duration ) {

				TWEEN.removeAll();

				for ( let i = 0; i < objects.length; i ++ ) {

					const object = objects[ i ];
					const target = targets[ i ];

					new TWEEN.Tween( object.position )
						.to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
						.easing( TWEEN.Easing.Exponential.InOut )
						.start();

					new TWEEN.Tween( object.rotation )
						.to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
						.easing( TWEEN.Easing.Exponential.InOut )
						.start();

				}

				new TWEEN.Tween( this )
					.to( {}, duration * 2 )
					.onUpdate( render )
					.start();

			}

			setupZilPay();

			function setupZilPay(){
				//get a reference to the ZilPay button on the screen. 
				const zilpayButton = document.getElementById( 'zilpayButton' );

				// If ZilPay is here, watch for click. When clicked ask ZilPay for wallet info. 
				if(zilpayButton){
					zilpayButton.addEventListener( 'click', function () {

						if(window.zilPay){
							window.zilPay.wallet.connect();

							if(window.zilPay.wallet.defaultAccount){
								var event = new Event("zilpayConnected");
								event.walletID = window.zilPay.wallet.defaultAccount;
								console.log(event.walletID)

								//Dispatch a "zilPayConnected" event with walletID as a property. 
								window.dispatchEvent(event);
							}						
						}
					} );
				}
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				render();

			}

			function animate() {

				requestAnimationFrame( animate );

				TWEEN.update();

				controls.update();

			}

			function render() {

				renderer.render( scene, camera );

			}
		</script>

		<div id="menu">
			<!-- button id="table">TABLE</button>
			<button id="sphere">SPHERE</button>
			<button id="helix">HELIX</button>
			<button id="grid">GRID</button -->
			<button id="zilpayButton">ZilPay</button>
		</div>