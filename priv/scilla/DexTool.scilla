scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils ListUtils IntUtils

library NFTDEX

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
      Cons {Message} msg1 msgs_tmp

let one = Uint256 1

type Status =
| Pending
| Active
| Sold
| Cancelled

(*ByStr20 - Address of owner*)
(*Uint256 - Price*)
(*ByStr20 - Address of contract *)
(*Uint256 - tokenID*)
(*Uint256 - orderID*)
(*Status  - Order status*)

 type Order =
| Order of ByStr20 Uint128 ByStr20 Uint256 Uint256 ByStr32 Status 

(* Error exceptions *)
type Error =
  | CodeDexNotApprovedToTransfer
  | CodeOrderWrongState
  | CodeOrderNotFound
  | CodePaymentAmountError
  | CodeNotAuthorized
  | CodeOrderAlreadyExists

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeDexNotApprovedToTransfer => Int32 -1
      | CodeOrderWrongState          => Int32 -2
      | CodeOrderNotFound            => Int32 -3
      | CodePaymentAmountError       => Int32 -4
      | CodeNotAuthorized            => Int32 -5
      | CodeOrderAlreadyExists          => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract NFTDEX
(contract_owner : ByStr20)

(*Order IDs - use global variable to track order numbers *)
field order_id : Uint256 = Uint256 0
(* Orderbook: mapping (order_id => ( Order struct ) *)
field orderbook : Map Uint256 Order
                  = Emp Uint256 Order
(* Temp_orderbook: mapping (contract_address => (token_id => (Order struct))) *)
field temp_orderbook : Map ByStr20 (Map Uint256 Order)
                            = Emp ByStr20 (Map Uint256 Order)         
field domain_tracker : Map ByStr32 Uint256 = Emp ByStr32 Uint256

(* Fee taken from each purchase, 10% of price *)
field dex_fee: Uint128 = Uint128 10

(* Procedures *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure CheckApproved (contract_address: ByStr20, token_id: Uint256)
  is_approved_call = {
    _tag: "GetApproved";
    _recipient: contract_address;
    _amount: Uint128 0;
    token_id: token_id
  };
  msgs = one_msg is_approved_call;
  send msgs
end

(* @dev Transfer the ownership of a given token ID to another address*)
(*@param contractAddress - address of NFT contract*)
(*@param tokenID - address of NFT contract*)
procedure TransferNFTtoOwner (contract_address: ByStr20, token_id: Uint256, owner: ByStr20)
  transfered = {
    _tag: "Transfer";
    _recipient: contract_address;
    _amount: Uint128 0;
    to: owner;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end
(* @dev Transfer the ownership of a given token ID to this address*)

(*@param contractAddress - address of NFT contract*)
(*@param tokenID - address of NFT contract*)
procedure TransferNFTtoDEX (contract_address: ByStr20, token_id: Uint256)
  transfered = {
    _tag: "TransferFrom";
    _recipient: contract_address;
    _amount: Uint128 0;
    to: _this_address;
    token_id: token_id
  };
  msgs = one_msg transfered;
  send msgs
end
(* @dev Transfer the ownership of a given domain node to this address*)

(*@param contractAddress - address of NFT contract*)
(*@param tokenID - address of NFT contract*)
procedure TransferDomaintoDEX (contract_address: ByStr20, node: ByStr32)
  transfered = {
    _tag: "transfer";
    _recipient: contract_address;
    _amount: Uint128 0;
    node: node;
    owner: _this_address
  };
  msgs = one_msg transfered;
  send msgs
end
(*@param contractAddress - address of NFT contract*)
(*@param tokenID - address of NFT contract*)
procedure TransferDomaintoOwner (contract_address: ByStr20, node: ByStr32, owner: ByStr20)
  transfered = {
    _tag: "transfer";
    _recipient: contract_address;
    _amount: Uint128 0;
    node: node;
    owner: owner
  };
  msgs = one_msg transfered;
  send msgs
end

procedure IsContractOwner()
  is_contract_owner = builtin eq _sender contract_owner;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotAuthorized;
    ThrowError err 
  end
end

(* Create a listing and sell an NFT*) 
(* First call from frontend. User wants to post an item for sale. They call this function *)
(* then it will check if approval is okay, if so, then it will transfer 721 to itself, *)
(* and create the listing information and publish it as an item for sale *)
transition Sell(contract_address: ByStr20, token_id: Uint256, price: Uint128)    
    (* Create a temporary order that is pending to be used as reference in callbacks*)
    list_state  = Pending;
    current_order_id <- order_id;
    nullBytes = _this_address;
    nullBytes = builtin sha256hash nullBytes;
    new_order = Order _sender price contract_address token_id current_order_id nullBytes list_state;
    temp_orderbook[contract_address][token_id] := new_order;
    new_order_id = builtin add current_order_id one;
    order_id := new_order_id;
    e = {_eventname : "PendingOrderRecorded"; extracted_order_id : current_order_id; order_info: new_order};
    event e;
     (* Check approval to see if we can transfer*)
    CheckApproved contract_address token_id 
end

(* Create a listing and sell an NFT*) 
(* First call from frontend. User wants to post an item for sale. They call this function *)
(* then it will check if approval is okay, if so, then it will transfer 721 to itself, *)
(* and create the listing information and publish it as an item for sale *)
transition SellDomain(contract_address: ByStr20, node_id: ByStr32, price: Uint128)    
    (* Create a temporary order that is pending to be used as reference in callbacks*)
    list_state  = Pending;
    current_order_id <- order_id;
    token_id = builtin to_uint256 node_id;
    already_exist <- exists domain_tracker[node_id];
    match already_exist with
      | True =>
        (* Error already exists *)
         err = CodeOrderAlreadyExists;
         ThrowError err
      | False => 
    new_order = Order _sender price contract_address token_id current_order_id node_id list_state;
    temp_orderbook[contract_address][token_id] := new_order;
    new_order_id = builtin add current_order_id one;
    order_id := new_order_id;
  
    e = {_eventname : "PendingOrderRecorded"; extracted_order_id : current_order_id; order_info: new_order};
    event e;
     (* Check approval to see if we can transfer*)
    (*CheckApproved contract_address node_id*)
    TransferDomaintoDEX contract_address node_id
    end
end
(*transition transfer(node: ByStr32, owner: ByStr20)*)

transition onTransferSuccess(node: ByStr32, owner: ByStr20)
  token_id = builtin to_uint256 node;
  temp_order <- temp_orderbook[_sender][token_id];
  is_DEX_address = builtin eq _this_address owner;
  match is_DEX_address with
    | True =>
      match temp_order with 
  | Some (Order owner price contract_address token_id item_order_id node_id list_state) => 
    match list_state with
    | Pending =>
      (* Store listing info inside the owners mappings and order mappings for references *)
      new_state = Active;
      domain_tracker[node] := token_id;
      new_order = Order owner price contract_address token_id item_order_id node_id new_state;
      orderbook[item_order_id] := new_order;
      delete temp_orderbook[contract_address][token_id];
      e = {_eventname : "ListOrderSuccess"; extracted_order_id : item_order_id; order: new_order};
      event e
    | _ =>
      err = CodeOrderWrongState;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
    | False =>
      end
  
end



(*Callback Transitions*)
transition GetApprovedCallBack(approved_addr: ByStr20, token_id: Uint256)
  is_dex_approved = builtin eq _this_address approved_addr;
  match is_dex_approved with
  | False =>
    (*Not approved to transfer NFT*)
    delete temp_orderbook[_sender][token_id];
    err = CodeDexNotApprovedToTransfer;
    ThrowError err
  | True =>
    (*Approved to transfer NFT - call TransferFrom on NFT*)
    temp_order <- temp_orderbook[_sender][token_id];
    match temp_order with 
    | Some (Order owner price contract_address token_id item_order_id node_id list_state) => 
      match list_state with
      | Pending =>
        e = {_eventname : "TokenApprovedSuccess"; extracted_order_id : item_order_id; token_id : token_id};
        event e;
        TransferNFTtoDEX _sender token_id
      | _ =>
        err = CodeOrderWrongState;
        ThrowError err
      end
    | None => 
      err = CodeOrderNotFound;
      ThrowError err
    end
  end
end

transition TransferFromSuccessCallBack(from: ByStr20, recipient: ByStr20, token_id: Uint256)
  temp_order <- temp_orderbook[_sender][token_id];
  match temp_order with 
  | Some (Order owner price contract_address token_id item_order_id node_id list_state) => 
    match list_state with
    | Pending =>
      (* Store listing info inside the owners mappings and order mappings for references *)
      new_state = Active;
      new_order = Order owner price contract_address token_id item_order_id node_id new_state;
      orderbook[item_order_id] := new_order;
      delete temp_orderbook[contract_address][token_id];
      e = {_eventname : "ListOrderSuccess"; extracted_order_id : item_order_id; order: new_order};
      event e
    | _ =>
      err = CodeOrderWrongState;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
end

(* Purchase an order/NFT that is for sale*)     
transition Purchase(item_order_id: Uint256)    
  listing <- orderbook[item_order_id];
  current_dex_fee <- dex_fee;
  match listing with
  | Some (Order owner price contract_address token_id item_order_id node_id list_state) =>  
    match list_state with
    | Active => 
      (*Order is active! Check amount is right*)
      is_amount_correct =  uint128_ge _amount price;
      match is_amount_correct with
      | True => 
        accept;
        (* amount is correct go ahead and remove order and transfer NFT plus funds*)
        (* remove fee from the purchase amount*)
        fees = builtin div price current_dex_fee;
        sellers_amount = builtin sub price fees;
        (* Edit the listing state and update the orderbook*)
        new_state = Sold;
        new_order = Order _sender price contract_address token_id item_order_id node_id new_state;
        orderbook[item_order_id] := new_order;
        
        (* check if domain or not*)
        nullBytes = _this_address;
        nullBytes = builtin sha256hash nullBytes;
        is_not_domain = builtin eq nullBytes node_id;
       match is_not_domain with
    | True => 
        (* transfer NFT to new owner*)
        nft_transfered = {
          _tag: "Transfer";
          _recipient: contract_address;
          _amount: Uint128 0;
          to: _sender;
          token_id: token_id
        };
        send_payment = {
          _tag : ""; 
          _recipient : owner; 
          _amount : sellers_amount
        };
        e = { _eventname : "PurchaseSuccess"; item_order_id: item_order_id; token_id: token_id; buyer_address: _sender; seller_address : owner; price_sold : sellers_amount};
        event e;
        msgs = two_msgs nft_transfered send_payment;
        send msgs
    | False =>
       delete domain_tracker[node_id];
        (* transfer NFT to new owner*)
       nft_transfered = {
          _tag: "transfer";
          _recipient: contract_address;
          _amount: Uint128 0;
          node: node_id;
          owner: _sender
        };
        send_payment = {
          _tag : ""; 
          _recipient : owner; 
          _amount : sellers_amount
        };
        e = { _eventname : "PurchaseSuccess"; item_order_id: item_order_id; token_id: token_id; buyer_address: _sender; seller_address : owner; price_sold : sellers_amount};
        event e;
        msgs = two_msgs nft_transfered send_payment;
        send msgs
    end
      | False =>
        err = CodePaymentAmountError;
        ThrowError err
      end
    | _ => 
      err = CodeOrderWrongState;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
end




(* Cancel a a listing, remove it, and transfer NFT back to owner*) 
(* Only performed by owner of listing*)
transition CancelListing(item_order_id : Uint256)
  listing <- orderbook[item_order_id];
  match listing with
  | Some (Order owner price contract_address token_id item_order_id node_id list_state) =>  
    (*check if owner of order*)
    is_owner = builtin eq _sender owner;
    match is_owner with
    | True => 
      match list_state with
      | Active => 
        (*Order is active! Go ahead and delete and return NFT*)
        (* check if domain or not*)
        nullBytes = _this_address;
        nullBytes = builtin sha256hash nullBytes;
        is_not_domain = builtin eq nullBytes node_id;
       match is_not_domain with
        | True => 
        (* transfer NFT to new owner*)
        delete orderbook[item_order_id];
        e = {_eventname : "OrderCanceled"; extracted_order : item_order_id};
        event e;
        (*transfer NFT to owner*)
        TransferNFTtoOwner contract_address token_id owner
        | False =>
       delete domain_tracker[node_id];
        (* transfer NFT to new owner*)
        delete orderbook[item_order_id];
        e = {_eventname : "OrderCanceled"; extracted_order : item_order_id};
        event e;
        TransferDomaintoOwner contract_address node_id owner
        end
       
      | _ => 
        err = CodeOrderWrongState;
        ThrowError err
      end
    | False =>
      err = CodeNotAuthorized;
      ThrowError err
    end
  | None => 
    err = CodeOrderNotFound;
    ThrowError err
  end
end

(* Admin only transitions *)

(*Withdrawal balance of contract *)
transition Withdrawal(to: ByStr20)
  IsContractOwner;
  (* get current balance *)
  bal <- _balance;
  e = {_eventname : "WithdrawBalanceSuccess"; withdrawal_amount : bal; recipient: _sender};
  event e;
  withdrawal = {_tag : ""; _recipient : contract_owner; _amount : bal};
  msgs = one_msg withdrawal;
  send msgs
end

(* Cancel an order and refund the NFT *)
transition CancelOrder(item_order_id: Uint256)
  IsContractOwner;
  listing <- orderbook[item_order_id];
  match listing with
  | Some (Order owner price contract_address token_id item_order_id node_id list_state) =>  
    (* Edit the listing state and update the orderbook*)
    new_state = Cancelled;
    new_order = Order owner price contract_address token_id item_order_id node_id new_state;
    orderbook[item_order_id] := new_order;
    e = {_eventname : "AdminCancelledOrder"; item_order_id : item_order_id; new_state: new_state};
    event e;
     (* check if domain or not*)
        nullBytes = _this_address;
        nullBytes = builtin sha256hash nullBytes;
        is_not_domain = builtin eq nullBytes node_id;
       match is_not_domain with
        | True => 
        (* transfer NFT to new owner*)
        TransferNFTtoOwner contract_address token_id owner
        | False =>
       delete domain_tracker[node_id];
        (* transfer NFT to new owner*)
         TransferDomaintoOwner contract_address node_id owner
        end
  | None =>
    err = CodeOrderNotFound;
    ThrowError err
  end
end

(* send NFT to person in case something goes wrong - to return their NFT *)
transition TransferNFT(contract_address : ByStr20, token_id: Uint256, to: ByStr20)
  IsContractOwner;
  TransferNFTtoOwner contract_address token_id to
end

transition ChangeDEXfee(new_fee: Uint128)
  IsContractOwner;
  old_fee <- dex_fee;
  dex_fee := new_fee;
  e = {_eventname : "FeeChanged"; previous_fee : old_fee; new_fee: new_fee};
  event e
end

transition RecipientAcceptTransferFrom(from: ByStr20, recipient: ByStr20, token_id: Uint256)
end

transition TransferSuccessCallBack(from: ByStr20, recipient: ByStr20, token_id: Uint256)
end